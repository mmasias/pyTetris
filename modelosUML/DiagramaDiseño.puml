@startuml


class Game {
    + {static} main(args : String[]) : void
}

note right of Game
    <b>Punto de entrada</b>
    Clase mínima que solo contiene
    el método main(). Separa la
    inicialización del programa de
    la lógica del juego.
end note

package TETRIS {

class Tetris {
    - board : Board
    - boardView : BoardView
    - gameRunning : boolean
    - score : int
    - console : Console
    - currentPieceView : PieceView
    
    + Tetris(width : int, height : int)
    + spawnNewPiece() : void
    - processUserInput(input : String) : void
    + gameLoop() : void
}


class Board {
    - grid : char[][]
    - width : int
    - height : int
    - currentPiece : Piece
    
    + Board(width : int, height : int)
    - clearBoard() : void
    + getWidth() : int
    + getHeight() : int
    + getGrid() : char[][]
    + setCurrentPiece(piece : Piece) : void
    + getCurrentPiece() : Piece
    + canMovePiece(piece : Piece, deltaX : int, deltaY : int) : boolean
    + canRotatePiece(piece : Piece, clockwise : boolean) : boolean
    + placePiece(piece : Piece, symbol : char) : void
    + clearCompleteLines() : int
}

class Piece {
    - shape : boolean[][]
    - position : Position
    
    + Piece(shape : boolean[][])
    + getShape() : boolean[][]
    + getPosition() : Position
    + moveDown() : void
    + moveLeft() : void
    + moveRight() : void
    + rotate() : void
    + rotateClockwise() : void
    + rotateCounterClockwise() : void
}

class Position {
    - x : int
    - y : int
    
    + Position(x : int, y : int)
    + getX() : int
    + getY() : int
    + setX(x : int) : void
    + setY(y : int) : void
    + add(other : Position) : Position
}

class PieceFactory {
    + {static} createIPiece() : Piece
    + {static} createOPiece() : Piece
    + {static} createTPiece() : Piece
    + {static} createLPiece() : Piece
    + {static} createIPieceView() : PieceView
    + {static} createOPieceView() : PieceView
    + {static} createTPieceView() : PieceView
    + {static} createLPieceView() : PieceView
}

class BoardView {
    - console : Console
    
    + BoardView(console : Console)
    + display(board : Board, currentPieceView : PieceView) : void
}

class PieceView {
    - symbol : char
    
    + PieceView(symbol : char)
    + getSymbol() : char
    + setSymbol(symbol : char) : void
    + render(piece : Piece, displayGrid : char[][]) : void
}

class Console {
    <<enumeration>> ForegroundColor
    <<enumeration>> BackgroundColor
    
    - bufferedReader : BufferedReader
    - supportsAnsiColors : boolean
    
    + Console()
    + readString(title : String) : String
    + readInt(title : String) : int
    + readChar(title : String) : char
    + write(text : String) : void
    + writeln(text : String) : void
    + clearScreen() : void
    + writeError(format : String) : void
    ..Overloads con colores..
    + write/writeln(..., ForegroundColor) : void
    + write/writeln(..., BackgroundColor) : void
    + write/writeln(..., ForegroundColor, BackgroundColor) : void
}

Game ..> Tetris : "crea"

Tetris *-- Board : "contiene"
Tetris *-- BoardView : "utiliza"
Tetris *-- Console : "utiliza"
Tetris *-- PieceFactory : "utiliza"

Board *-- Piece : "contiene pieza actual"

Piece *-- Position : "tiene"

PieceFactory ..> Piece : "crea"
PieceFactory ..> PieceView : "crea"

BoardView *-- Console : "utiliza"
BoardView ..> Board : "visualiza"
BoardView ..> PieceView : "utiliza para renderizar"

PieceView ..> Piece : "renderiza"



note right of Tetris
    <b>Controlador principal</b>
    Implementa el game loop y
    coordina todas las interacciones
    entre modelo y vista.
end note

note right of Board
    <b>Modelo del tablero</b>
    Usa char[][] para representar
    el estado permanente del juego.
    Gestiona validaciones y lógica
    de negocio.
end note

note right of Piece
    <b>Modelo de pieza</b>
    Usa boolean[][] para la forma.
    Implementa algoritmos de 
    rotación matricial.
end note

note right of PieceFactory
    <b>Factory Method</b>
    Encapsula la creación de
    piezas y sus vistas asociadas.
    Garantiza consistencia.
end note

note bottom of Console
    <b>Utilidad de I/O</b>
    Abstrae la entrada/salida con
    soporte opcional para colores ANSI.
    Los métodos mostrados son los principales,
    existen múltiples overloads para
    diferentes tipos y colores.
end note

}

@enduml